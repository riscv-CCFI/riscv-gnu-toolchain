diff --git a/include/opcode/riscv-opc.h b/include/opcode/riscv-opc.h
index 85d35c1..d4b5779 100644
--- a/include/opcode/riscv-opc.h
+++ b/include/opcode/riscv-opc.h
@@ -21,6 +21,12 @@
 #ifndef RISCV_ENCODING_H
 #define RISCV_ENCODING_H
 /* Instruction opcode macros.  */
+/* RetTag: begin */
+#define MATCH_PAC 0x700b
+#define MASK_PAC  0xfe00707f
+#define MATCH_AUT 0x200700b
+#define MASK_AUT  0xfe00707f
+/* RetTag: end */
 #define MATCH_SLLI_RV32 0x1013
 #define MASK_SLLI_RV32  0xfe00707f
 #define MATCH_SRLI_RV32 0x5013
diff --git a/opcodes/riscv-opc.c b/opcodes/riscv-opc.c
index f67375f..c8f9653 100644
--- a/opcodes/riscv-opc.c
+++ b/opcodes/riscv-opc.c
@@ -318,6 +318,10 @@ const struct riscv_opcode riscv_opcodes[] =
 {"prefetch.w",  0, INSN_CLASS_ZICBOP, "f(s)", MATCH_PREFETCH_W, MASK_PREFETCH_W, match_opcode, 0 },
 {"pause",       0, INSN_CLASS_ZIHINTPAUSE, "", MATCH_PAUSE, MASK_PAUSE, match_opcode, 0 },
 
+/* RetTag: begin */
+{"pac",         0, INSN_CLASS_I, "d,s,t",     MATCH_PAC, MASK_PAC, match_opcode, 0 },
+{"aut",         0, INSN_CLASS_I, "d,s,t",     MATCH_AUT, MASK_AUT, match_opcode, 0 },
+
 /* Basic RVI instructions and aliases.  */
 {"unimp",       0, INSN_CLASS_C, "",          0, 0xffffU, match_opcode, INSN_ALIAS },
 {"unimp",       0, INSN_CLASS_I, "",          MATCH_CSRRW|(CSR_CYCLE << OP_SH_CSR), 0xffffffffU,  match_opcode, 0 }, /* csrw cycle, x0  */
