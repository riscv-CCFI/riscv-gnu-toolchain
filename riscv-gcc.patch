diff --git a/gcc/config/riscv/riscv.cc b/gcc/config/riscv/riscv.cc
index 4939d99..27cd922 100644
--- a/gcc/config/riscv/riscv.cc
+++ b/gcc/config/riscv/riscv.cc
@@ -123,6 +123,10 @@ struct GTY(())  riscv_frame_info {
 
   /* The offset of arg_pointer_rtx from the bottom of the frame.  */
   HOST_WIDE_INT arg_pointer_offset;
+  
+  /* RetTag: begin */
+  bool laid_out;
+  /* RetTag: end */
 };
 
 enum riscv_privilege_levels {
@@ -4077,6 +4081,7 @@ riscv_compute_frame_info (void)
   /* Only use save/restore routines when the GPRs are atop the frame.  */
   if (frame->hard_frame_pointer_offset != frame->total_size)
     frame->save_libcall_adjustment = 0;
+    cfun->machine->frame.laid_out = true;
 }
 
 /* Make sure that we're not trying to eliminate to the wrong hard frame
@@ -4348,6 +4353,62 @@ riscv_expand_prologue (void)
 
   if (cfun->machine->naked_p)
     return;
+    
+  /* RetTag: begin */
+  unsigned long function_id;
+  unsigned long shfit_nums = 32;
+  
+  /* Sign return address for functions.  */
+  // printf("riscv64_return_address_signing_enabled!\n");
+  /* Generate function id. */
+  srand((unsigned)time(NULL));
+  function_id = rand();
+  cfun->func_id = function_id;
+
+  int t1 = function_id & 0xff;
+  int t2 = (function_id >> 16) & 0xff;
+
+  insn = emit_insn (gen_addi (gen_rtx_REG (Pmode, T5_REGNUM), 
+  gen_rtx_REG (Pmode, X0X0_REGNUM), 
+  GEN_INT(t1)
+  ));
+  
+  insn = emit_insn (gen_addi (gen_rtx_REG (Pmode, T6_REGNUM), 
+  gen_rtx_REG (Pmode, X0X0_REGNUM), 
+  GEN_INT(t2)
+  ));
+
+  insn = emit_insn (gen_slli (gen_rtx_REG (Pmode, T6_REGNUM),
+  gen_rtx_REG (Pmode, T6_REGNUM),
+  GEN_INT(16)
+  ));
+
+  insn = emit_insn (gen_add3_insn (
+    gen_rtx_REG (Pmode, T5_REGNUM),
+    gen_rtx_REG (Pmode, T5_REGNUM),
+    gen_rtx_REG (Pmode, T6_REGNUM) 
+  ));
+
+  insn = emit_insn (gen_slli (gen_rtx_REG (Pmode, T5_REGNUM),
+  gen_rtx_REG (Pmode, T5_REGNUM),
+  GEN_INT(shfit_nums)
+  ));
+
+  insn = emit_insn (gen_add3_insn (
+    gen_rtx_REG (Pmode, T5_REGNUM),
+    gen_rtx_REG (Pmode, T5_REGNUM),
+    gen_rtx_REG (Pmode, STACK_POINTER_REGNUM) 
+  ));
+
+
+  insn = emit_insn (gen_pac (gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM),
+  gen_rtx_REG (Pmode, T5_REGNUM),
+  gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM) 
+  ));
+  add_reg_note (insn, REG_CFA_TOGGLE_RA_MANGLE, const0_rtx);
+  RTX_FRAME_RELATED_P (insn) = 1;
+  
+  /* RetTag: end */
 
   /* When optimizing for size, call a subroutine to save the registers.  */
   if (riscv_use_save_libcall (frame))
@@ -4467,12 +4528,13 @@ riscv_expand_epilogue (int style)
 
       return;
     }
-
+	/*
   if ((style == NORMAL_RETURN) && riscv_can_use_return_insn ())
     {
       emit_jump_insn (gen_return ());
       return;
     }
+    */
 
   /* Reset the epilogue cfa info before starting to emit the epilogue.  */
   epilogue_cfa_sp_offset = 0;
@@ -4580,6 +4642,51 @@ riscv_expand_epilogue (int style)
       REG_NOTES (insn) = dwarf;
     }
 
+  
+
+  /* RetTag: begin */
+  /* Authenticate return address for functions. */
+  unsigned long shfit_nums = 32;
+  unsigned long function_id = cfun->func_id;
+
+  int t1 = function_id & 0xff;
+  int t2 = (function_id >> 16) & 0xff;
+
+  insn = emit_insn (gen_addi (gen_rtx_REG (Pmode, T5_REGNUM), 
+  gen_rtx_REG (Pmode, X0X0_REGNUM), 
+  GEN_INT(t1)
+  ));
+  
+  insn = emit_insn (gen_addi (gen_rtx_REG (Pmode, T6_REGNUM), 
+  gen_rtx_REG (Pmode, X0X0_REGNUM), 
+  GEN_INT(t2)
+  ));
+
+  insn = emit_insn (gen_slli (gen_rtx_REG (Pmode, T6_REGNUM),
+  gen_rtx_REG (Pmode, T6_REGNUM),
+  GEN_INT(16)
+  ));
+
+  insn = emit_insn (gen_slli (gen_rtx_REG (Pmode, T5_REGNUM),
+  gen_rtx_REG (Pmode, T5_REGNUM),
+  GEN_INT(shfit_nums)
+  ));
+
+  insn = emit_insn (gen_add3_insn (
+    gen_rtx_REG (Pmode, T5_REGNUM),
+    gen_rtx_REG (Pmode, T5_REGNUM),
+    gen_rtx_REG (Pmode, STACK_POINTER_REGNUM) 
+  ));
+
+
+  insn = emit_insn (gen_aut (gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM),
+  gen_rtx_REG (Pmode, T5_REGNUM),
+  gen_rtx_REG (Pmode, RETURN_ADDR_REGNUM) 
+  ));
+  add_reg_note (insn, REG_CFA_TOGGLE_RA_MANGLE, const0_rtx);
+  RTX_FRAME_RELATED_P (insn) = 1;
+  
+  /* RetTag: end */
   if (use_restore_libcall)
     {
       rtx dwarf = riscv_adjust_libcall_cfi_epilogue ();
diff --git a/gcc/config/riscv/riscv.md b/gcc/config/riscv/riscv.md
index c6399b1..4a51ac3 100644
--- a/gcc/config/riscv/riscv.md
+++ b/gcc/config/riscv/riscv.md
@@ -22,6 +22,14 @@
 (define_c_enum "unspec" [
   ;; Override return address for exception handling.
   UNSPEC_EH_RETURN
+  
+ ;; RetTag: begin ;;
+ ;; Signing/Authenticating X1(ra).
+ UNSPEC_AUT
+ UNSPEC_PAC
+ UNSPEC_SLLI
+ UNSPEC_ADDI
+ ;; RetTag: end ;;
 
   ;; Symbolic accesses.  The order of this list must match that of
   ;; enum riscv_symbol_type in riscv-protos.h.
@@ -72,7 +80,8 @@
 ])
 
 (define_constants
-  [(RETURN_ADDR_REGNUM		1)
+  [(X0X0_REGNUM  0)
+   (RETURN_ADDR_REGNUM		1)
    (GP_REGNUM 			3)
    (TP_REGNUM			4)
    (T0_REGNUM			5)
@@ -89,6 +98,10 @@
    (S9_REGNUM			25)
    (S10_REGNUM			26)
    (S11_REGNUM			27)
+   ;; RetTag: begin ;;
+   (T5_REGNUM			30)
+   (T6_REGNUM			31)
+   ;; RetTag: end ;;
 
    (NORMAL_RETURN		0)
    (SIBCALL_RETURN		1)
@@ -433,6 +446,47 @@
 (define_insn_reservation "ghost" 0
   (eq_attr "type" "ghost")
   "nothing")
+  
+ ;; RetTag: begin ;;
+;; ~~Signing~~ X1(ra)
+(define_insn "pac"
+	[(set (match_operand:DI 0 "register_operand" "=r")
+	(unspec:DI [(match_operand:DI 1 "register_operand" "r")
+	(match_operand:DI 2 "register_operand" "r")]UNSPEC_PAC)
+  )
+  (clobber (reg:DI RETURN_ADDR_REGNUM))]
+	"TARGET_64BIT"
+	"pac\t%0,%1,%2"
+)
+
+;; Authenticating X1(ra)
+(define_insn "aut"
+	[(set (match_operand:DI 0 "register_operand" "=r")
+	(unspec:DI [(match_operand:DI 1 "register_operand" "r")
+	(match_operand:DI 2 "register_operand" "r")]UNSPEC_AUT))
+  (clobber (reg:DI RETURN_ADDR_REGNUM))]
+	"TARGET_64BIT"
+	"aut\t%0,%1,%2"
+)
+
+(define_insn "addi"
+  [(set (match_operand:DI 0 "register_operand" "=r,r")
+	(unspec:DI [(match_operand:DI 1 "register_operand" " r,r")
+		 (match_operand:DI 2 "arith_operand" " r,I")]UNSPEC_ADDI)
+  )]
+	"TARGET_64BIT"
+	"addi\t%0,%1,%2"
+)
+
+(define_insn "slli"
+  [(set (match_operand:DI 0 "register_operand" "=r,r")
+	(unspec:DI [(match_operand:DI 1 "register_operand" " r,r")
+		 (match_operand:DI 2 "arith_operand" " r,I")]UNSPEC_SLLI)
+  )]
+	"TARGET_64BIT"
+	"slli\t%0,%1,%2"
+)
+;; RetTag: end ;;
 
 ;;
 ;;  ....................
diff --git a/gcc/function.h b/gcc/function.h
index 0986137..9258d14 100644
--- a/gcc/function.h
+++ b/gcc/function.h
@@ -247,6 +247,11 @@ public:
    describing the status of the current function.  */
 
 struct GTY(()) function {
+
+  /* RetTag: begin */
+  unsigned long func_id;
+  /* RetTag: end */
+
   struct eh_status *eh;
 
   /* The control flow graph for this function.  */
